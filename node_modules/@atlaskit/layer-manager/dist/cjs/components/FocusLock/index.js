'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactFocusLock = require('react-focus-lock');

var _reactFocusLock2 = _interopRequireDefault(_reactFocusLock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/sort-comp */
var FocusLock = function (_Component) {
  (0, _inherits3.default)(FocusLock, _Component);

  function FocusLock() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, FocusLock);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FocusLock.__proto__ || (0, _getPrototypeOf2.default)(FocusLock)).call.apply(_ref, [this].concat(args))), _this), _this.initFromProps = false, _this.teardownFromProps = false, _this.initialise = function () {
      var autoFocus = _this.props.autoFocus;
      // set the element to hide from assistive technology

      _this.ariaHiddenNode = _this.props.ariaHiddenNode || _this.context.ariaHiddenNode;

      // accessible `popup` content
      if (_this.ariaHiddenNode) {
        _this.ariaHiddenNode.setAttribute('aria-hidden', '');
      }
      if (typeof autoFocus === 'function') {
        var elem = autoFocus();
        if (elem && elem.focus) {
          elem.focus();
        }
      }
    }, _this.teardown = function () {
      if (_this.ariaHiddenNode) {
        _this.ariaHiddenNode.removeAttribute('aria-hidden');
      }
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(FocusLock, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          enabled = _props.enabled,
          autoFocus = _props.autoFocus;


      if (typeof autoFocus === 'function') {
        console.warn('@atlaskit/layer-manager: Passing a function as autoFocus in FocusLock is deprecated. Please see "Auto focusing an element" in https://atlaskit.atlassian.com/packages/core/layer-manager');
      }

      if (enabled) {
        this.initialise();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!this.initFromProps && !this.teardownFromProps) {
        this.teardown();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.enabled && this.props.enabled !== prevProps.enabled) {
        this.initFromProps = true;
        this.initialise();
      }

      if (!this.props.enabled && this.props.enabled !== prevProps.enabled) {
        this.teardownFromProps = true;
        this.teardown();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          enabled = _props2.enabled,
          autoFocus = _props2.autoFocus,
          returnFocus = _props2.returnFocus;

      return _react2.default.createElement(
        _reactFocusLock2.default,
        {
          disabled: !enabled,
          autoFocus: !!autoFocus,
          returnFocus: returnFocus
        },
        this.props.children
      );
    }
  }]);
  return FocusLock;
}(_react.Component);

FocusLock.contextTypes = {
  /** available when invoked within @atlaskit/layer-manager */
  ariaHiddenNode: _propTypes2.default.object
};
FocusLock.defaultProps = {
  autoFocus: true,
  enabled: true,
  returnFocus: true
};
exports.default = FocusLock;