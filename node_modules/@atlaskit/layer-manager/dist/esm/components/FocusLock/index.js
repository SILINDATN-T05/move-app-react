import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import FocusTrap from 'react-focus-lock';

/* eslint-disable react/sort-comp */
var FocusLock = function (_Component) {
  _inherits(FocusLock, _Component);

  function FocusLock() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FocusLock);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FocusLock.__proto__ || _Object$getPrototypeOf(FocusLock)).call.apply(_ref, [this].concat(args))), _this), _this.initFromProps = false, _this.teardownFromProps = false, _this.initialise = function () {
      var autoFocus = _this.props.autoFocus;
      // set the element to hide from assistive technology

      _this.ariaHiddenNode = _this.props.ariaHiddenNode || _this.context.ariaHiddenNode;

      // accessible `popup` content
      if (_this.ariaHiddenNode) {
        _this.ariaHiddenNode.setAttribute('aria-hidden', '');
      }
      if (typeof autoFocus === 'function') {
        var elem = autoFocus();
        if (elem && elem.focus) {
          elem.focus();
        }
      }
    }, _this.teardown = function () {
      if (_this.ariaHiddenNode) {
        _this.ariaHiddenNode.removeAttribute('aria-hidden');
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FocusLock, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          enabled = _props.enabled,
          autoFocus = _props.autoFocus;


      if (typeof autoFocus === 'function') {
        console.warn('@atlaskit/layer-manager: Passing a function as autoFocus in FocusLock is deprecated. Please see "Auto focusing an element" in https://atlaskit.atlassian.com/packages/core/layer-manager');
      }

      if (enabled) {
        this.initialise();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!this.initFromProps && !this.teardownFromProps) {
        this.teardown();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.enabled && this.props.enabled !== prevProps.enabled) {
        this.initFromProps = true;
        this.initialise();
      }

      if (!this.props.enabled && this.props.enabled !== prevProps.enabled) {
        this.teardownFromProps = true;
        this.teardown();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          enabled = _props2.enabled,
          autoFocus = _props2.autoFocus,
          returnFocus = _props2.returnFocus;

      return React.createElement(
        FocusTrap,
        {
          disabled: !enabled,
          autoFocus: !!autoFocus,
          returnFocus: returnFocus
        },
        this.props.children
      );
    }
  }]);

  return FocusLock;
}(Component);

FocusLock.contextTypes = {
  /** available when invoked within @atlaskit/layer-manager */
  ariaHiddenNode: PropTypes.object
};
FocusLock.defaultProps = {
  autoFocus: true,
  enabled: true,
  returnFocus: true
};
export default FocusLock;