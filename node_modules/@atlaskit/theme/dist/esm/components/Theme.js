import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _extends from 'babel-runtime/helpers/extends';
import _Object$keys from 'babel-runtime/core-js/object/keys';
import React, { Component } from 'react';
import { Consumer, Provider } from '../components/Context';


var noop = function noop() {
  return null;
};

function resolveThemeValue(parentTheme, childTheme, name) {
  var childThemeFn = childTheme[name];
  return typeof childThemeFn === 'function' ? simplifyThemeFunction(parentTheme, childTheme, childThemeFn, name) : childThemeFn;
}

function mergeParentAndChildTheme(parentTheme, childTheme) {
  return _Object$keys(childTheme).reduce(function (parentThemeCopy, name) {
    // eslint-disable-next-line no-param-reassign
    parentThemeCopy[name] = resolveThemeValue(parentTheme, childTheme, name);
    return parentThemeCopy;
  }, _extends({}, parentTheme));
}

function simplifyThemeFunction(parentTheme, childTheme, childThemeFn, name) {
  return function (state) {
    return childThemeFn(state, _extends({}, childTheme, _defineProperty({}, name, parentTheme[name] || noop)));
  };
}

var Theme = function (_Component) {
  _inherits(Theme, _Component);

  function Theme() {
    _classCallCheck(this, Theme);

    return _possibleConstructorReturn(this, (Theme.__proto__ || _Object$getPrototypeOf(Theme)).apply(this, arguments));
  }

  _createClass(Theme, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          childTheme = _props.values;

      return React.createElement(
        Consumer,
        null,
        function (parentTheme) {
          var merged = mergeParentAndChildTheme(parentTheme, childTheme);
          return typeof children === 'function' ? children(merged) : React.createElement(
            Provider,
            { value: merged },
            children
          );
        }
      );
    }
  }]);

  return Theme;
}(Component);

Theme.defaultProps = {
  values: {}
};
export default Theme;