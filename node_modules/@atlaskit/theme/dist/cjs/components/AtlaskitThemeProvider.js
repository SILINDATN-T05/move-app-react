'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(['\n  background-color: ', ';\n  color: ', ';\n\n  a {\n    color: ', ';\n  }\n  a:hover {\n    color: ', ';\n  }\n  a:active {\n    color: ', ';\n  }\n  a:focus {\n    outline-color: ', ';\n  }\n  h1 {\n    color: ', ';\n  }\n  h2 {\n    color: ', ';\n  }\n  h3 {\n    color: ', ';\n  }\n  h4 {\n    color: ', ';\n  }\n  h5 {\n    color: ', ';\n  }\n  h6 {\n    color: ', ';\n  }\n  small {\n    color: ', ';\n  }\n'], ['\n  background-color: ', ';\n  color: ', ';\n\n  a {\n    color: ', ';\n  }\n  a:hover {\n    color: ', ';\n  }\n  a:active {\n    color: ', ';\n  }\n  a:focus {\n    outline-color: ', ';\n  }\n  h1 {\n    color: ', ';\n  }\n  h2 {\n    color: ', ';\n  }\n  h3 {\n    color: ', ';\n  }\n  h4 {\n    color: ', ';\n  }\n  h5 {\n    color: ', ';\n  }\n  h6 {\n    color: ', ';\n  }\n  small {\n    color: ', ';\n  }\n']);

// For forward-compat until everything is upgraded.


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _colors = require('../colors');

var colors = _interopRequireWildcard(_colors);

var _constants = require('../constants');

var _Context = require('./Context');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getStylesheetResetCSS(state) {
  var backgroundColor = colors.background(state);
  return '\n    body { background: ' + backgroundColor + '; }\n  ';
}

function buildThemeState(mode) {
  return { theme: (0, _defineProperty3.default)({}, _constants.CHANNEL, { mode: mode }) };
}

var LegacyReset = _styledComponents2.default.div(_templateObject, colors.background, colors.text, colors.link, colors.linkHover, colors.linkActive, colors.linkOutline, colors.heading, colors.heading, colors.heading, colors.heading, colors.heading, colors.subtleHeading, colors.subtleText);

var AtlaskitThemeProvider = function (_Component) {
  (0, _inherits3.default)(AtlaskitThemeProvider, _Component);

  function AtlaskitThemeProvider(props) {
    (0, _classCallCheck3.default)(this, AtlaskitThemeProvider);

    var _this = (0, _possibleConstructorReturn3.default)(this, (AtlaskitThemeProvider.__proto__ || (0, _getPrototypeOf2.default)(AtlaskitThemeProvider)).call(this, props));

    _this.state = buildThemeState(props.mode);
    return _this;
  }

  (0, _createClass3.default)(AtlaskitThemeProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { hasAtlaskitThemeProvider: true };
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (!this.context.hasAtlaskitThemeProvider) {
        var css = getStylesheetResetCSS(this.state);
        this.stylesheet = document.createElement('style');
        this.stylesheet.type = 'text/css';
        this.stylesheet.innerHTML = css;
        if (document && document.head) {
          document.head.appendChild(this.stylesheet);
        }
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (newProps.mode !== this.props.mode) {
        var newThemeState = buildThemeState(newProps.mode);
        if (this.stylesheet) {
          var css = getStylesheetResetCSS(newThemeState);
          this.stylesheet.innerHTML = css;
        }
        this.setState(newThemeState);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.stylesheet && document && document.head) {
        document.head.removeChild(this.stylesheet);
        delete this.stylesheet;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      var theme = this.state.theme;
      return (
        /* Wrapping the new provider around the old one provides forward
        compatibility when using the old provider for styled components. This
        allows us to use components converted to use the new API with consumers
        using the old provider along side components that may still be using the
        old theming API. */
        _react2.default.createElement(
          _Context.Provider,
          { value: { mode: theme[_constants.CHANNEL].mode } },
          _react2.default.createElement(
            _styledComponents.ThemeProvider,
            { theme: theme },
            _react2.default.createElement(
              LegacyReset,
              null,
              children
            )
          )
        )
      );
    }
  }]);
  return AtlaskitThemeProvider;
}(_react.Component);

AtlaskitThemeProvider.defaultProps = {
  mode: _constants.DEFAULT_THEME_MODE
};
AtlaskitThemeProvider.childContextTypes = {
  hasAtlaskitThemeProvider: _propTypes2.default.bool
};
AtlaskitThemeProvider.contextTypes = {
  hasAtlaskitThemeProvider: _propTypes2.default.bool
};
exports.default = AtlaskitThemeProvider;