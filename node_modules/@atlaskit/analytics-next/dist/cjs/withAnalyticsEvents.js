'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

exports.default = withAnalyticsEvents;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _UIAnalyticsEvent = require('./UIAnalyticsEvent');

var _UIAnalyticsEvent2 = _interopRequireDefault(_UIAnalyticsEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This component is used to grab the analytics functions off context.
// It uses legacy context, but provides an API similar to 16.3 context.
// This makes it easier to use with the forward ref API.
var AnalyticsContextConsumer = function (_Component) {
  (0, _inherits3.default)(AnalyticsContextConsumer, _Component);

  function AnalyticsContextConsumer() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, AnalyticsContextConsumer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = AnalyticsContextConsumer.__proto__ || (0, _getPrototypeOf2.default)(AnalyticsContextConsumer)).call.apply(_ref, [this].concat(args))), _this), _this.createAnalyticsEvent = function (payload) {
      var _this$context = _this.context,
          getAtlaskitAnalyticsEventHandlers = _this$context.getAtlaskitAnalyticsEventHandlers,
          getAtlaskitAnalyticsContext = _this$context.getAtlaskitAnalyticsContext;

      var context = typeof getAtlaskitAnalyticsContext === 'function' && getAtlaskitAnalyticsContext() || [];
      var handlers = typeof getAtlaskitAnalyticsEventHandlers === 'function' && getAtlaskitAnalyticsEventHandlers() || [];
      return new _UIAnalyticsEvent2.default({ context: context, handlers: handlers, payload: payload });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(AnalyticsContextConsumer, [{
    key: 'render',
    value: function render() {
      return this.props.children(this.createAnalyticsEvent);
    }
  }]);
  return AnalyticsContextConsumer;
}(_react.Component);

// patch the callback so it provides analytics information.


AnalyticsContextConsumer.contextTypes = {
  getAtlaskitAnalyticsEventHandlers: _propTypes2.default.func,
  getAtlaskitAnalyticsContext: _propTypes2.default.func
};
var modifyCallbackProp = function modifyCallbackProp(propName, eventMapEntry, props, createAnalyticsEvent) {
  return function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var event = typeof eventMapEntry === 'function' ? eventMapEntry(createAnalyticsEvent, props) : createAnalyticsEvent(eventMapEntry);
    var providedCallback = props[propName];
    if (providedCallback) {
      providedCallback.apply(undefined, args.concat([event]));
    }
  };
};

// helper that provides an easy way to map an object's values
// ({ string: A }, (string, A) => B) => { string: B }
var vmap = function vmap(obj, fn) {
  return (0, _keys2.default)(obj).reduce(function (curr, k) {
    return (0, _extends4.default)({}, curr, (0, _defineProperty3.default)({}, k, fn(k, obj[k])));
  }, {});
};

function withAnalyticsEvents() {
  var createEventMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return function (WrappedComponent) {
    // $FlowFixMe - flow 0.67 doesn't know about forwardRef
    var WithAnalyticsEvents = _react2.default.forwardRef(function (props, ref) {
      return _react2.default.createElement(
        AnalyticsContextConsumer,
        null,
        function (createAnalyticsEvent) {
          var modifiedProps = vmap(createEventMap, function (propName, entry) {
            return modifyCallbackProp(propName, entry, props, createAnalyticsEvent);
          });
          return _react2.default.createElement(WrappedComponent, (0, _extends4.default)({}, props, modifiedProps, {
            createAnalyticsEvent: createAnalyticsEvent,
            ref: ref
          }));
        }
      );
    });

    WithAnalyticsEvents.displayName = 'WithAnalyticsEvents(' + (WrappedComponent.displayName || WrappedComponent.name) + ')';

    return WithAnalyticsEvents;
  };
}