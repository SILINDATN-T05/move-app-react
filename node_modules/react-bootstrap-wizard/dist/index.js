'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactstrap = require('reactstrap');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./react-wizard.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactWizard = function (_React$Component) {
    _inherits(ReactWizard, _React$Component);

    function ReactWizard(props) {
        _classCallCheck(this, ReactWizard);

        var _this = _possibleConstructorReturn(this, (ReactWizard.__proto__ || Object.getPrototypeOf(ReactWizard)).call(this, props));

        var width;
        if (_this.props.steps.length === 1) {
            width = '100%';
        } else {
            if (window.innerWidth < 600) {
                if (_this.props.steps.length !== 3) {
                    width = '50%';
                } else {
                    width = 100 / 3 + '%';
                }
            } else {
                if (_this.props.steps.length === 2) {
                    width = '50%';
                } else {
                    width = 100 / 3 + '%';
                }
            }
        }
        _this.state = {
            currentStep: 0,
            color: _this.props.color !== undefined ? _this.props.color : "primary",
            nextButton: _this.props.steps.length > 1 ? true : false,
            previousButton: false,
            finishButton: _this.props.steps.length === 1 ? true : false,
            width: width,
            movingTabStyle: {
                transition: 'transform 0s'
            }
        };
        _this.navigationStepChange = _this.navigationStepChange.bind(_this);
        _this.refreshAnimation = _this.refreshAnimation.bind(_this);
        _this.previousButtonClick = _this.previousButtonClick.bind(_this);
        _this.previousButtonClick = _this.previousButtonClick.bind(_this);
        _this.finishButtonClick = _this.finishButtonClick.bind(_this);
        return _this;
    }

    _createClass(ReactWizard, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.refreshAnimation(0);
            window.addEventListener("resize", this.updateWidth.bind(this));
        }
    }, {
        key: 'updateWidth',
        value: function updateWidth() {
            this.refreshAnimation(this.state.currentStep);
        }
    }, {
        key: 'navigationStepChange',
        value: function navigationStepChange(key) {
            if (this.props.navSteps) {
                var validationState = true;
                if (key > this.state.currentStep) {
                    for (var i = this.state.currentStep; i < key; i++) {
                        if (this.refs[this.props.steps[i].stepName].isValidated !== undefined && this.refs[this.props.steps[i].stepName].isValidated() === false) {
                            validationState = false;
                            break;
                        }
                    }
                }
                if (validationState) {
                    this.setState({
                        currentStep: key,
                        nextButton: this.props.steps.length > key + 1 ? true : false,
                        previousButton: key > 0 ? true : false,
                        finishButton: this.props.steps.length === key + 1 ? true : false
                    });
                    this.refreshAnimation(key);
                }
            }
        }
    }, {
        key: 'nextButtonClick',
        value: function nextButtonClick() {
            if (this.props.validate && (this.refs[this.props.steps[this.state.currentStep].stepName].isValidated !== undefined && this.refs[this.props.steps[this.state.currentStep].stepName].isValidated() || this.refs[this.props.steps[this.state.currentStep].stepName].isValidated === undefined) || this.props.validate === undefined) {
                var key = this.state.currentStep + 1;
                this.setState({
                    currentStep: key,
                    nextButton: this.props.steps.length > key + 1 ? true : false,
                    previousButton: key > 0 ? true : false,
                    finishButton: this.props.steps.length === key + 1 ? true : false
                });
                this.refreshAnimation(key);
            }
        }
    }, {
        key: 'previousButtonClick',
        value: function previousButtonClick() {
            var key = this.state.currentStep - 1;
            if (key >= 0) {
                this.setState({
                    currentStep: key,
                    nextButton: this.props.steps.length > key + 1 ? true : false,
                    previousButton: key > 0 ? true : false,
                    finishButton: this.props.steps.length === key + 1 ? true : false
                });
                this.refreshAnimation(key);
            }
        }
    }, {
        key: 'finishButtonClick',
        value: function finishButtonClick() {
            if (this.props.validate && (this.refs[this.props.steps[this.state.currentStep].stepName].isValidated !== undefined && this.refs[this.props.steps[this.state.currentStep].stepName].isValidated() || this.refs[this.props.steps[this.state.currentStep].stepName].isValidated === undefined) && this.props.finishButtonClick !== undefined) {
                this.props.finishButtonClick();
            }
        }
    }, {
        key: 'refreshAnimation',
        value: function refreshAnimation(index) {
            var total = this.props.steps.length;
            var li_width = 100 / total;
            var total_steps = this.props.steps.length;
            var move_distance = this.refs.wizard.children[0].offsetWidth / total_steps;
            var index_temp = index;
            var vertical_level = 0;

            var mobile_device = window.innerWidth < 600 && total > 3;

            if (mobile_device) {
                move_distance = this.refs.wizard.children[0].offsetWidth / 2;
                index_temp = index % 2;
                li_width = 50;
            }

            this.setState({ width: li_width + '%' });

            var step_width = move_distance;
            move_distance = move_distance * index_temp;

            var current = index + 1;

            // if(current === 1 || (mobile_device === true && (index % 2 === 0) )){
            //     move_distance -= 8;
            // } else if(current === total_steps || (mobile_device === true && (index % 2 === 1))){
            //     move_distance += 8;
            // }

            if (mobile_device) {
                vertical_level = parseInt(index / 2);
                vertical_level = vertical_level * 38;
            }
            var movingTabStyle = {
                width: step_width,
                transform: 'translate3d(' + move_distance + 'px, ' + vertical_level + 'px, 0)',
                transition: 'all 0.5s cubic-bezier(0.29, 1.42, 0.79, 1)'
            };
            this.setState({ movingTabStyle: movingTabStyle });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            return _react2.default.createElement(
                'div',
                { className: 'wizard-container', ref: 'wizard' },
                _react2.default.createElement(
                    _reactstrap.Card,
                    { className: 'card card-wizard active', 'data-color': 'primary' },
                    this.props.title !== undefined || this.props.subtitle !== undefined ? _react2.default.createElement(
                        _reactstrap.CardHeader,
                        { className: this.props.headerTextCenter !== undefined ? "text-center" : "", 'data-background-color': this.state.color },
                        this.props.title !== undefined ? _react2.default.createElement(
                            _reactstrap.CardTitle,
                            { tag: 'h3' },
                            this.props.title
                        ) : null,
                        this.props.subtitle !== undefined ? _react2.default.createElement(
                            _reactstrap.CardSubtitle,
                            null,
                            this.props.subtitle
                        ) : null,
                        _react2.default.createElement(
                            'div',
                            { className: 'wizard-navigation' },
                            _react2.default.createElement(
                                _reactstrap.Nav,
                                { pills: true },
                                this.props.steps.map(function (prop, key) {
                                    return _react2.default.createElement(
                                        _reactstrap.NavItem,
                                        { key: key, style: { width: _this2.state.width } },
                                        _react2.default.createElement(
                                            _reactstrap.NavLink,
                                            {
                                                className: key === _this2.state.currentStep ? "active" : "",
                                                onClick: function onClick() {
                                                    return _this2.navigationStepChange(key);
                                                }
                                            },
                                            prop.stepName
                                        )
                                    );
                                })
                            ),
                            _react2.default.createElement(
                                'div',
                                { className: 'moving-tab', style: this.state.movingTabStyle },
                                this.props.steps[this.state.currentStep].stepName
                            )
                        )
                    ) : null,
                    _react2.default.createElement(
                        _reactstrap.CardBody,
                        null,
                        _react2.default.createElement(
                            _reactstrap.TabContent,
                            { activeTab: this.state.currentStep },
                            this.props.steps.map(function (prop, key) {
                                return _react2.default.createElement(
                                    _reactstrap.TabPane,
                                    { tabId: key, key: key, className: _this2.state.currentStep === key ? "fade show" : "fade" },
                                    typeof prop.component === 'function' ? _react2.default.createElement(prop.component, { ref: prop.stepName }) : _react2.default.createElement(
                                        'div',
                                        { ref: prop.stepName },
                                        prop.component
                                    )
                                );
                            })
                        )
                    ),
                    _react2.default.createElement(
                        _reactstrap.CardFooter,
                        null,
                        _react2.default.createElement(
                            'div',
                            { style: { float: "right" } },
                            this.state.nextButton ? _react2.default.createElement(
                                _reactstrap.Button,
                                { className: "btn-next" + (this.props.nextButtonClasses !== undefined ? " " + this.props.nextButtonClasses : ""), onClick: function onClick() {
                                        return _this2.nextButtonClick();
                                    } },
                                this.props.nextButtonText !== undefined ? this.props.nextButtonText : "Next"
                            ) : null,
                            this.state.finishButton ? _react2.default.createElement(
                                _reactstrap.Button,
                                { className: "btn-finish" + (this.finishButtonClasses !== undefined ? " " + this.props.finishButtonClasses : ""), onClick: function onClick() {
                                        return _this2.finishButtonClick();
                                    } },
                                this.props.finishButtonText !== undefined ? this.props.finishButtonText : "Finish"
                            ) : null
                        ),
                        _react2.default.createElement(
                            'div',
                            { style: { float: "left" } },
                            this.state.previousButton ? _react2.default.createElement(
                                _reactstrap.Button,
                                { className: "btn-previous" + (this.props.previousButtonClasses !== undefined ? " " + this.props.previousButtonClasses : ""), onClick: function onClick() {
                                        return _this2.previousButtonClick();
                                    } },
                                this.props.previousButtonText !== undefined ? this.props.previousButtonText : "Previous"
                            ) : null
                        ),
                        _react2.default.createElement('div', { className: 'clearfix' })
                    )
                )
            );
        }
    }]);

    return ReactWizard;
}(_react2.default.Component);

ReactWizard.propTypes = {
    color: _propTypes2.default.oneOf(['primary', 'green', 'orange', 'red', 'blue']),
    previousButtonClasses: _propTypes2.default.string,
    finishButtonClasses: _propTypes2.default.string,
    nextButtonClasses: _propTypes2.default.string,
    headerTextCenter: _propTypes2.default.bool,
    steps: _propTypes2.default.arrayOf(_propTypes2.default.object),
    navSteps: _propTypes2.default.bool,
    validate: _propTypes2.default.bool
};

exports.default = ReactWizard;
